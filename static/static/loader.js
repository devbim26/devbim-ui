// @ts-nocheck
(function() {
  'use strict';
  
  console.log('üöÄ DevBIM: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞');
  
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–¥–µ–ª–∏–∫–∞—Ç–Ω–æ: —É–¥–∞–ª—è–µ–º —Ü–µ–ª–∏–∫–æ–º –º–æ–¥–∞–ª—å–Ω—ã–µ —É–∑–ª—ã)
  function blockPopups() {
    try {
      // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞/–æ–≤–µ—Ä–ª–µ–∏
      const selectors = [
        '[role="dialog"]',
        '[aria-modal="true"]',
        '[data-modal]',
        '.modal',
        '.modal-content',
        '.modal-overlay',
        '.onboarding-modal',
        '.welcome-modal',
        '[class*="welcome"]',
        '[class*="onboarding"]',
        '[class*="whats-new"]',
        '[class*="changelog"]',
        '.update-modal',
        '.update-info'
      ];
  
      const nodes = new Set();
      selectors.forEach(sel => document.querySelectorAll(sel).forEach(n => nodes.add(n)));
  
      nodes.forEach(node => {
        const txt = (node.textContent || '').toLowerCase();
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–º—ã—Å–ª—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–µ—Ç—å –æ–±—ã—á–Ω—ã–µ –±–ª–æ–∫–∏
        if (
          txt.includes("what's new") ||
          txt.includes('—á—Ç–æ –Ω–æ–≤–æ–≥–æ') ||
          txt.includes('changelog') ||
          txt.includes('–æ–±–Ω–æ–≤–ª–µ–Ω') ||
          txt.includes('welcome') ||
          txt.includes('onboarding')
        ) {
          // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª–∫—É –∏ –µ—ë backdrop
          const backdrop = node.parentElement?.querySelector?.('[class*="backdrop"],[class*="overlay"],.fixed.inset-0');
          try { backdrop && backdrop.remove(); } catch {}
          try { node.remove(); } catch {}
        }
      });
    } catch (e) {
      console.debug('DevBIM popup-block skip:', e);
    }
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å—Ä–∞–∑—É –∏ –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—à–∫—É –¥–æ –∫–ª–∏–∫–∞
  blockPopups();
  (function burstBlock() {
    let t = 0;
    const id = setInterval(() => {
      blockPopups();
      if ((t += 1) > 20) clearInterval(id); // ~5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 250–º—Å
    }, 250);
  })();
  
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ /api/config –∏ i18n
  const originalFetch = window.fetch;
  window.fetch = async function(...args) {
    const response = await originalFetch.apply(this, args);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –∫ i18n –ø–µ—Ä–µ–≤–æ–¥–∞–º
    const url = typeof args[0] === 'string' ? args[0] : (args[0].url || args[0].toString());
    // –ü–æ–¥–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —á–µ–π–Ω–¥–∂–ª–æ–≥–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª /static/devbim-changelog.json
    if (url && url.indexOf('/api/changelog') !== -1) {
      try {
        const localUrl = `${location.origin}/static/devbim-changelog.json?v=${Date.now()}`;
        const local = await originalFetch.call(this, localUrl, { cache: 'no-store' });
        const data = await local.json();
        return new Response(JSON.stringify(data), {
          status: 200,
          statusText: 'OK',
          headers: { 'Content-Type': 'application/json' }
        });
      } catch (e) {
        console.debug('DevBIM changelog local override failed, falling back to server:', e);
        // –í–µ—Ä–Ω—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      }
    }
    if (url && (url.includes('translation') || url.includes('i18n') || url.includes('locale') || url.includes('.json'))) {
      try {
        const clonedResponse = response.clone();
        const data = await clonedResponse.json();
        
        // –ó–∞–º–µ–Ω—è–µ–º –≤ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
        if (data['Made by Open WebUI Community']) {
          data['Made by Open WebUI Community'] = 'Made by DevBIM Community';
          console.log('üåç DevBIM: –ó–∞–º–µ–Ω–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ i18n –¥–∞–Ω–Ω—ã—Ö');
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for (var key in data) {
          if (key.includes('Open WebUI')) {
            data[key] = data[key].replace(/Open WebUI/g, 'DevBIM');
          }
          if (data[key] && typeof data[key] === 'string') {
            data[key] = data[key].replace(/Made by Open WebUI Community/g, 'Made by DevBIM Community');
            data[key] = data[key].replace(/–°–¥–µ–ª–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º OpenWebUI/g, '–°–¥–µ–ª–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º DevBIM');
            data[key] = data[key].replace(/–°–¥–µ–ª–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º Open WebUI/g, '–°–¥–µ–ª–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º DevBIM');
          }
        }
        
        return new Response(JSON.stringify(data), {
          status: response.status,
          statusText: response.statusText,
          headers: response.headers
        });
      } catch (e) {
        console.log('‚ùå DevBIM: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ i18n –¥–∞–Ω–Ω—ã—Ö:', e);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ /api/config
    if (url && url.indexOf('/api/config') !== -1) {
      const clonedResponse = response.clone();
      const data = await clonedResponse.json();
      
      // –ó–∞–º–µ–Ω—è–µ–º –∏–º—è –±—Ä–µ–Ω–¥–∞
      if (data.name) {
        data.name = 'DevBIM';
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π response —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const newResponse = new Response(JSON.stringify(data), {
        status: response.status,
        statusText: response.statusText,
        headers: response.headers
      });
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      document.title = document.title.replace(/Open WebUI/g, 'DevBIM');
      
      return newResponse;
    }
    
    return response;
  };
  
  // –†–∞–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  function updateBrandEarly() {
    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –±—Ä–µ–Ω–¥–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    const brandElement = document.querySelector('#sidebar .sidebar a.flex.flex-1.px-1\\.5 > div.font-primary');
    if (brandElement && brandElement.textContent && brandElement.textContent.indexOf('Open WebUI') !== -1) {
      brandElement.textContent = 'DevBIM';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.title && document.title.indexOf('Open WebUI') !== -1) {
      document.title = document.title.replace(/Open WebUI/g, 'DevBIM');
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º i18n
    function replaceText(element) {
        if (!element || !element.textContent) return;
        
        const text = element.textContent;
        let newText = text;
        
        // –ó–∞–º–µ–Ω–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        newText = newText.replace(/Made by Open WebUI Community/g, 'Made by DevBIM Community');
        newText = newText.replace(/Open WebUI/g, 'DevBIM');
        
        // –ó–∞–º–µ–Ω–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        newText = newText.replace(/–°–¥–µ–ª–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º OpenWebUI/g, '–°–¥–µ–ª–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º DevBIM');
        newText = newText.replace(/–°–¥–µ–ª–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º Open WebUI/g, '–°–¥–µ–ª–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º DevBIM');
        
        // –ó–∞–º–µ–Ω–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã)
        newText = newText.replace(/R√©alis√© par la communaut√© OpenWebUI/g, 'R√©alis√© par la communaut√© DevBIM');
        newText = newText.replace(/Von der OpenWebUI-Community/g, 'Von der DevBIM-Community');
        newText = newText.replace(/Realizzato dalla Comunit√† Open WebUI/g, 'Realizzato dalla Comunit√† DevBIM');
        newText = newText.replace(/Creado por la Comunidad Open-WebUI/g, 'Creado por la Comunidad DevBIM');
        newText = newText.replace(/Feito pela Comunidade OpenWebUI/g, 'Feito pela Comunidade DevBIM');
        
        if (newText !== text) {
            element.textContent = newText;
            console.log('üìù DevBIM: –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç:', text, '‚Üí', newText);
        }
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç "Made by Open WebUI Community" –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    const communityElements = document.querySelectorAll('div.text-xl.font-medium.mb-1.line-clamp-1');
    for (var i = 0; i < communityElements.length; i++) {
        replaceText(communityElements[i]);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            mutation.addedNodes.forEach(function(node) {
                if (node.nodeType === 1) { // –≠–ª–µ–º–µ–Ω—Ç
                    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –≤ —Ü–µ–ª–µ–≤–æ–º –±–ª–æ–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
                    const elements = node.querySelectorAll('div.text-xl.font-medium.mb-1.line-clamp-1');
                    elements.forEach(el => replaceText(el));
                }
            });
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –±—Ä–µ–Ω–¥–æ–º
    const titleElements = document.querySelectorAll('title, h1, h2, .brand, .logo');
    for (var i = 0; i < titleElements.length; i++) {
      var el = titleElements[i];
      if (el.textContent && el.textContent.indexOf('Open WebUI') !== -1) {
        el.textContent = el.textContent.replace(/Open WebUI/g, 'DevBIM');
      }
    }
  }
// --- DevBIM: remove Open WebUI license/Twemoji blocks from "About" tab ---
function removeLicenseBlocks() {
  try {
    const about = document.getElementById('tab-about') || document.querySelector('#tab-about');
    if (!about) return;

    const candidates = about.querySelectorAll('div, p, span, a');
    candidates.forEach((node) => {
      const t = (node.textContent || '').toLowerCase();

      if (
        t.includes('emoji graphics provided by') ||
        t.includes('twemoji') ||
        t.includes('copyright (c) 2025 open webui') ||
        t.includes('redistribution and use in source and binary forms') ||
        t.includes('this software is provided by the copyright holders')
      ) {
        // –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–µ–º–Ω–æ–≥–æ –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—ã–π –±–ª–æ–∫
        let target = node;
        for (let i = 0; i < 3 && target && target.parentElement; i++) {
          if (target.classList?.contains('text-xs') || target.tagName === 'DIV') break;
          target = target.parentElement;
        }
        try { target && target.remove(); } catch {}
      }
    });
  } catch (e) {
    console.debug('DevBIM license-block cleanup skip:', e);
  }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–∑—É –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã (–∫–∞–∫ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ø–∞–ø–æ–≤)
removeLicenseBlocks();
(function burstLicenseClean() {
  let t = 0;
  const id = setInterval(() => {
    removeLicenseBlocks();
    if ((t += 1) > 20) clearInterval(id); // ~5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 250–º—Å
  }, 250);
})();
  
  // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ä–∞–∑—É
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', updateBrandEarly);
  } else {
    updateBrandEarly();
  }

  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ö—ç—à–∏ –±–∞–Ω–¥–ª–æ–≤ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å,
  // –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –¥–µ—Ä–∂–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π index.html –∏ –ª–æ–º–∞—Ç—å—Å—è 404 –Ω–∞ /_app/immutable/*.js.
  // –ü–æ–π–º–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏–º –∫—ç—à.
  (function setupOnceCacheBust() {
    if (sessionStorage.getItem('devbim-cache-busted') === '1') return;
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 404 –æ—à–∏–±–æ–∫
    let errorCount = 0;
    const maxErrors = 3;
    
    window.addEventListener('error', function (e) {
      const target = e.target || e.srcElement;
      if (target && target.tagName === 'SCRIPT') {
        const src = target.getAttribute('src') || '';
        if (src.indexOf('/_app/immutable/') !== -1) {
          errorCount++;
          console.log('üîÑ DevBIM: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 404 –æ—à–∏–±–∫–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞:', src);
          
          if (errorCount >= maxErrors) {
            try {
              sessionStorage.setItem('devbim-cache-busted', '1');
              const url = new URL(window.location.href);
              url.searchParams.set('v', 'force_' + Date.now().toString());
              console.log('üîÑ DevBIM: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞:', url.toString());
              window.location.replace(url.toString());
            } catch (err) {
              console.error('üîÑ DevBIM: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫—ç—à–∞:', err);
            }
          }
        }
      }
    }, true);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    window.addEventListener('load', function() {
      setTimeout(function() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        const scripts = document.querySelectorAll('script[src*="/_app/immutable/"]');
        let failedScripts = 0;
        
        scripts.forEach(function(script) {
          if (!script.loaded) {
            failedScripts++;
          }
        });
        
        if (failedScripts > 0 && sessionStorage.getItem('devbim-cache-busted') !== '1') {
          console.log('üîÑ DevBIM: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã, —Å–±—Ä–æ—Å –∫—ç—à–∞');
          sessionStorage.setItem('devbim-cache-busted', '1');
          const url = new URL(window.location.href);
          url.searchParams.set('v', 'force_' + Date.now().toString());
          window.location.replace(url.toString());
        }
      }, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    });
    
    // –°–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    setTimeout(() => sessionStorage.removeItem('devbim-cache-busted'), 120000);
  })();
  
  // –í–ù–ò–ú–ê–ù–ò–ï: –¥—É–±–ª—å —Ñ—É–Ω–∫—Ü–∏–∏ blockPopups –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
  // (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–Ω–Ω–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ —Ñ–∞–π–ª–∞)
  function blockPopups() { try { /* no-op: —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤—ã—à–µ */ } catch {} }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞)
  function interceptNewElements() {
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === 1) { // –≠–ª–µ–º–µ–Ω—Ç
            // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –≤ —Ü–µ–ª–µ–≤–æ–º –±–ª–æ–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            const elements = node.querySelectorAll('div.text-xl.font-medium.mb-1.line-clamp-1');
            elements.forEach(el => replaceText(el));
            // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –Ω–æ–¥—ã/–æ–≤–µ—Ä–ª–µ–∏
            const className = node.className || '';
            const id = node.id || '';
            const text = (node.textContent || '').toLowerCase();
            if (
              className?.toLowerCase?.().includes('modal') ||
              className?.toLowerCase?.().includes('popup') ||
              className?.toLowerCase?.().includes('welcome') ||
              className?.toLowerCase?.().includes('onboarding') ||
              className?.toLowerCase?.().includes('update') ||
              id.includes('modal') || id.includes('popup') ||
              text.includes("what's new") || text.includes('—á—Ç–æ –Ω–æ–≤–æ–≥–æ') ||
              text.includes('changelog') || text.includes('–æ–±–Ω–æ–≤–ª–µ–Ω')
            ) {
              try { node.remove(); } catch {}
              console.log('üö´ DevBIM: –£–¥–∞–ª–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ');
            }
          }
        });
      });
    });
    
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ MutationObserver
  const observer = new MutationObserver(function(mutations) {
    updateBrandEarly();
    blockPopups(); // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
  });
  
  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
  if (document.body) {
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  } else {
    document.addEventListener('DOMContentLoaded', () => {
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    });
  }
})();